G.skipZeroOrMore()
.lBrace()
  .lBrace()
    .udRecSink({leakedValue: '?x'})
  .rBrace()
  .or()
  .lBrace()
    .udOpenClosedFile({name: '?file'})
  .rBrace()
.rBrace()

//((udRecSink)|(udOpenClosedFile))

var open = function(file){
  file = 1;
}
var access = function(file){
  file = 2;
}
var close = function(file){
  file = 0;
    var z = 4;
    var g = 5;
}



close(file);
//open(file);
access(file);

var source = function(){
    //Some secure info leaked
    return 'Important';
}

var sink = function(x){
  //leak some data
}

var x,y,z, o = {};
x = source();
o.y = x;
z = o.y;
sink(z);


var g = 5;


G.skipZeroOrMore()
.udAssign({leftName:'?left', rightName:'?right'})
.skipZeroOrMore()
.udRecSink({leakedValue: '?left'})
-----------------------------------------












G.skipZeroOrMore()
.state({
  node: {
    type: 'ExpressionStatement',
    expression: {
      left : '?left', 
      right: '?right'
    }
  },
  properties:
  {
    '?leftTest' : '?left.object',
    '?llll'		: '?leftTest.name',
    '?rightTest': prop('identity', '?llll')
  },
})



G.skipZeroOrMore()
.state({
  node: {
    declarations: '?decs'
  },
  properties:
  {
    '?decsAt'     : prop('at','?decs', 0),
    '?decs' : prop('length','?decs'),
  },
})





G.skipZeroOrMore()
.state({
  node: {
    declarations: '?decs'
  },
  properties:
  {
    '?decsAt'     : prop('at','?decs', 0),
    '?decsAtName' : '?decsAt.id.name',
  },
})
.skipZeroOrMore()
.state({
  node: {
    type: 'ExpressionStatement',
    expression: {
      left : '?left', 
      right: '?right'
    }
  },
  properties:
  {
    '?leftName'  : '?left.object.name',
    '?decsAtName': '?right.name',
  },
})